using std::memory::*
using std::ops::*

// A simple, variable-length array type.
// E is the type of values it can hold.
//
// To access array items, use the index operator: array[index]
// Accessing an item above the index will cause a crash.
//
// To create a new array, use a literal:
// let arr = [0, 1, 2, 3]
// let text = ["Hello", "I'm", "A", "String", "Array!"]
//
// This is not valid since the type of elements cannot be inferred:
// let a = []
// If you need an empty array, use the constructor on the class.
//
// Retrieving elements works as you'd expect using indexing syntax:
// print([2, 123, 312][1]) // prints 123
class Array<E>:

    var len: usize
    var capacity: usize
    var ptr: *E

    /// Init an empty array with the given capacity.
    /// Will allocate the amount given on the heap (malloc),
    /// capacity of 0 results in no allocation until first insertion.
    init(capacity):
        this.ptr = allocate::<E>(capacity)
        this.len = 0
    end

    /// Simply init an array out of raw parts.
    /// Rarely useful, unless dealing with low-level code.
    init(len, capacity, ptr)

    fn get(index: usize) -> E:
        if (index >= this.len) panic("Array index out of bounds!")
        load_value_index(this.ptr, index)
    end

    fn set(index: usize, element: E) -> E:
        if (index >= this.len) panic("Array index out of bounds!")

        let old_elem = this.get(index)
        dec_ref(old_elem)

        inc_ref(element)
        write_value_index(this.ptr, index, element)

        old_elem
    end

    fn push(elem: E):
        this.safeExtend()
        inc_ref(elem)

        // This sets the pointer directly, as Array.set will
        // return the old element - which would be unallocated memory,
        // resulting in a segfault.
        write_value_index(this.ptr, this.len, elem)
        this.len = this.len + 1
    end

    fn pop() -> Opt<E>:
        if (this.len == 0) return Opt::<E>:None

        this.len = this.len - 1
        let value = this.get(this.len)

        dec_ref(value)
        Opt:Some(value)
    end

    fn safeExtend():
        if (this.len == this.capacity) this.extend()
    end

    fn extend():
        this.capacity = (this.capacity + 1) * 2
        let new_ptr = allocate::<E>(this.capacity)
        copy_ptr(this.ptr, new_ptr, this.len)
        drop(this.ptr)
        this.ptr = new_ptr
    end
end

impl Free for Array<E>:
    fn free():
        loop (elem from 0 to this.len):
            dec_ref(this[elem])
        end
        drop(this.ptr)
    end
end

impl IndexGet<usize, E> for Array<E>:
    fn index_get(index: usize) -> E:
        this.get(index)
    end
end

impl IndexSet<usize, E> for Array<E>:
    fn index_set(index: usize, value: E):
        this.set(index, value)
    end
end

